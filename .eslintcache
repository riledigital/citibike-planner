[{"/Users/upstatement/Dev/citibike-planner/src/index.js":"1","/Users/upstatement/Dev/citibike-planner/src/App.js":"2","/Users/upstatement/Dev/citibike-planner/src/serviceWorker.js":"3","/Users/upstatement/Dev/citibike-planner/src/MapStyles.js":"4","/Users/upstatement/Dev/citibike-planner/src/components/Header/Header.js":"5","/Users/upstatement/Dev/citibike-planner/src/components/StationHeader/StationHeader.js":"6","/Users/upstatement/Dev/citibike-planner/src/components/StationPopularity/StationPopularity.js":"7","/Users/upstatement/Dev/citibike-planner/src/components/StationActivity/StationActivity.js":"8","/Users/upstatement/Dev/citibike-planner/src/components/LiveStatus/LiveStatus.js":"9","/Users/upstatement/Dev/citibike-planner/src/modules/Audio/index.js":"10","/Users/upstatement/Dev/citibike-planner/src/components/index.js":"11","/Users/upstatement/Dev/citibike-planner/src/components/Modal/index.js":"12","/Users/upstatement/Dev/citibike-planner/src/components/ActionButton/index.js":"13","/Users/upstatement/Dev/citibike-planner/src/components/Footer.js":"14","/Users/upstatement/Dev/citibike-planner/src/components/CircleLegend.js":"15","/Users/upstatement/Dev/citibike-planner/src/components/Header/index.js":"16","/Users/upstatement/Dev/citibike-planner/src/components/LiveStatus/index.js":"17","/Users/upstatement/Dev/citibike-planner/src/components/StationActivity/index.js":"18","/Users/upstatement/Dev/citibike-planner/src/components/StationHeader/index.js":"19","/Users/upstatement/Dev/citibike-planner/src/components/StationPopularity/index.js":"20","/Users/upstatement/Dev/citibike-planner/src/components/StationRanking/index.js":"21","/Users/upstatement/Dev/citibike-planner/src/components/StationRanking/Ranking.js":"22","/Users/upstatement/Dev/citibike-planner/src/components/MapLegend/index.js":"23","/Users/upstatement/Dev/citibike-planner/src/components/MapLegend/MapLegend.js":"24"},{"size":527,"mtime":1609096814876,"results":"25","hashOfConfig":"26"},{"size":7110,"mtime":1611707038578,"results":"27","hashOfConfig":"26"},{"size":5086,"mtime":1609096302213,"results":"28","hashOfConfig":"26"},{"size":611,"mtime":1609096302201,"results":"29","hashOfConfig":"26"},{"size":0,"mtime":1611704810557,"results":"30","hashOfConfig":"26"},{"size":2100,"mtime":1609096302205,"results":"31","hashOfConfig":"26"},{"size":423,"mtime":1609096302206,"results":"32","hashOfConfig":"26"},{"size":4404,"mtime":1611704858886,"results":"33","hashOfConfig":"26"},{"size":0,"mtime":1611704820884,"results":"34","hashOfConfig":"26"},{"size":1089,"mtime":1611706961275,"results":"35","hashOfConfig":"26"},{"size":612,"mtime":1611706039544,"results":"36","hashOfConfig":"26"},{"size":2667,"mtime":1611703569663,"results":"37","hashOfConfig":"26"},{"size":242,"mtime":1611703656022,"results":"38","hashOfConfig":"26"},{"size":1727,"mtime":1611703642201,"results":"39","hashOfConfig":"26"},{"size":671,"mtime":1611703670491,"results":"40","hashOfConfig":"26"},{"size":564,"mtime":1611704811673,"results":"41","hashOfConfig":"26"},{"size":1873,"mtime":1611704819534,"results":"42","hashOfConfig":"26"},{"size":96,"mtime":1611704857716,"results":"43","hashOfConfig":"26"},{"size":90,"mtime":1611704887884,"results":"44","hashOfConfig":"26"},{"size":102,"mtime":1611704915882,"results":"45","hashOfConfig":"26"},{"size":72,"mtime":1611704931088,"results":"46","hashOfConfig":"26"},{"size":530,"mtime":1609096302206,"results":"47","hashOfConfig":"26"},{"size":78,"mtime":1611704989059,"results":"48","hashOfConfig":"26"},{"size":1964,"mtime":1611704990254,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1aftk75",{"filePath":"53","messages":"54","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"52"},"/Users/upstatement/Dev/citibike-planner/src/index.js",[],["105","106"],"/Users/upstatement/Dev/citibike-planner/src/App.js",["107","108","109","110","111","112","113"],"/Users/upstatement/Dev/citibike-planner/src/serviceWorker.js",[],"/Users/upstatement/Dev/citibike-planner/src/MapStyles.js",[],"/Users/upstatement/Dev/citibike-planner/src/components/Header/Header.js",[],["114","115"],"/Users/upstatement/Dev/citibike-planner/src/components/StationHeader/StationHeader.js",["116","117","118","119"],"// TODO: Remove live status stuff from it\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./StationHeader.module.css\";\nimport { useTransition, animated } from \"react-spring\";\nimport { ReactComponent as LoadingIllustration } from \"./undraw_No_data_re_kwbl.svg\";\nconst StationHeader = ({ name, station_id, nta_name, boro_name }) => {\n  // Logic for handling null NTA codes\n  const [show, setShow] = useState(false);\n  const stationNeighborhood = !nta_name ? \"\" : nta_name;\n\n  const anim = useTransition(name, (item) => item, {\n    from: { transform: \"translate(0,-100px)\", opacity: 0 },\n    update: { transform: \"translate(0,0)\", opacity: 1 },\n    leave: {\n      transform: \"translate(0,-100px)\",\n      opacity: 0,\n      position: \"absolute\",\n    },\n    unique: false,\n    reset: true,\n  });\n\n  // useEffect(() => {\n  //   setShow(true);\n\n  //   return function cleanup() {\n  //     setShow(false);\n  //   };\n  // });\n\n  return name ? (\n    anim.map(\n      ({ item, key, props }) =>\n        item && (\n          <animated.div\n            style={props}\n            key={key}\n            className={styles.stationHeader}\n          >\n            <div className={styles.header}>\n              <h2 className={styles.heading}>{name}</h2>\n              <div className={styles.number}>{station_id}</div>\n            </div>\n            <div className={styles.nta}>\n              {nta_name}, {boro_name}\n            </div>\n          </animated.div>\n        )\n    )\n  ) : (\n    <div className={styles.loading}>\n      <p className={styles.message}>\n        Please click on a station on the map to view the activity details.\n      </p>\n      <figure className={styles.figure}>\n        <LoadingIllustration\n          className={styles.loadingIllustration}\n          alt=\"Two clipboards; missing data icon by Katerina Limpitsouni\"\n          viewBox=\"0 0 647.63626 632.17383\"\n          preserveAspectRatio=\"xMinYMin meet\"\n        />\n      </figure>\n    </div>\n  );\n};\n\nStationHeader.propTypes = {\n  station: PropTypes.object,\n};\nexport default StationHeader;\n","/Users/upstatement/Dev/citibike-planner/src/components/StationPopularity/StationPopularity.js",[],"/Users/upstatement/Dev/citibike-planner/src/components/StationActivity/StationActivity.js",["120","121","122","123"],"// https://observablehq.com/@d3/margin-convention\nimport React, { useEffect, useState } from \"react\";\nimport { extent, timeParse, timeFormat,scaleTime, scaleLinear } from 'd3';\nimport { useTransition, animated } from \"react-spring\";\n\nimport styles from \"./StationActivity.module.css\";\n\nconst StationActivity = ({\n  data = [],\n  width = 400,\n  height = 400,\n  fill = \"blue\",\n  textFill = \"white\",\n}) => {\n  const [items, setItems] = useState([]);\n\n  const transitions = useTransition(data, (item) => item.start_hour, {\n    from: { opacity: 0 },\n    enter: { opacity: 1 },\n    leave: { opacity: 0 },\n    unique: true,\n    reset: true,\n    trail: 20,\n  });\n\n  const formatHour = timeFormat(\"%_I %p\");\n  const parseTime = timeParse(\"%H\");\n  const margin = { top: 10, right: 5, bottom: 35, left: 5 };\n  let extentOut = data ? extent(data, (d) => d.mean_rides) : [0, 100];\n  const xScale = scaleTime()\n    .domain([6, 24])\n    .range([margin.left, width - margin.right]);\n  let yScale = scaleLinear()\n    .domain(extentOut)\n    .range([height - margin.bottom, margin.top]);\n\n  const padding = 1;\n  const currentHour = new Date().getHours();\n  useEffect(() => {\n    extentOut = data ? extent(data, (d) => d.mean_rides) : [0, 100];\n    yScale = scaleLinear().domain(extentOut).range([height, 0]);\n  });\n\n  return !data ? (\n    <div>\n      <h3 className={styles.heading}>Average trips per hour</h3>\n      <p>Select a station on the map to view activity trends.</p>\n    </div>\n  ) : (\n    <figure className={styles[\"barchart__hours\"]}>\n      <h3 className={styles.heading}>Average trips per hour</h3>\n      <svg viewBox={`0 0 ${width} ${height}`}>\n        <text\n          className={styles.axisTitle}\n          textAnchor=\"middle\"\n          fontFamily=\"Jost\"\n          fontSize=\"8px\"\n          fontWeight=\"800\"\n          fill={textFill}\n          transform={`translate(${width / 2} ${height - 4})`}\n        >\n          {/* Time of day */}\n        </text>\n        <g className={styles.axisLabels}>\n          {data.map((d, idx) => {\n            return (\n              <g\n                key={idx}\n                className={styles.axisBottom}\n                transform={`\n              translate(${xScale(d.start_hour) + margin.left}, ${\n                  height - margin.bottom / 1.2\n                })\n              rotate(${45}) `}\n              >\n                <text\n                  className={styles.axisBottom}\n                  fill={textFill}\n                  fontSize=\"9px\"\n                  fontFamily=\"Jost\"\n                  fontWeight=\"600\"\n                  textAnchor=\"left\"\n                >\n                  {d.start_hour >= 6\n                    ? formatHour(parseTime(d.start_hour))\n                    : null}\n                </text>\n              </g>\n            );\n          })}\n        </g>\n        <g className={styles.bars}>\n          {transitions.map(({ item, props, key }) => (\n            <React.Fragment key={key}>\n              <animated.g style={props}>\n                <g\n                  transform={`translate(${xScale(item.start_hour)}, ${yScale(\n                    item.mean_rides\n                  )})`}\n                  className={styles.svgBar}\n                >\n                  <rect\n                    className={\n                      styles[\n                        item.start_hour === currentHour ? \"current_hour\" : null\n                      ]\n                    }\n                    fill={fill}\n                    width={width / 24 - padding}\n                    height={`${\n                      height - yScale(item.mean_rides) - margin.bottom\n                    }`}\n                  >\n                    <title>\n                      Average of {item.mean_rides} at hour {item.start_hour}\n                    </title>\n                  </rect>\n                  <text\n                    className={styles.barLabel}\n                    textAnchor=\"left\"\n                    dx=\"3px\"\n                    dy=\"-.25em\"\n                    fill={textFill}\n                    fontSize=\"8px\"\n                    fontFamily=\"Jost\"\n                    fontWeight=\"800\"\n                  >\n                    {Number.parseFloat(item.mean_rides).toFixed(0)}\n                  </text>\n                </g>\n              </animated.g>\n            </React.Fragment>\n          ))}\n        </g>\n      </svg>\n    </figure>\n  );\n};\n\nexport default StationActivity;\n","/Users/upstatement/Dev/citibike-planner/src/components/LiveStatus/LiveStatus.js",[],"/Users/upstatement/Dev/citibike-planner/src/modules/Audio/index.js",[],"/Users/upstatement/Dev/citibike-planner/src/components/index.js",[],"/Users/upstatement/Dev/citibike-planner/src/components/Modal/index.js",[],"/Users/upstatement/Dev/citibike-planner/src/components/ActionButton/index.js",[],"/Users/upstatement/Dev/citibike-planner/src/components/Footer.js",["124"],"import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <div className=\"App-footer\">\n        <a href=\"https://member.citibikenyc.com/map/\" target=\"_blank\">\n              Go to the Official CitiBike Map\n            </a>\n            <details>\n              <summary>How is popularity calculated?</summary>\n              <p>\n                We rank rides by the average number of trips started at each\n                stations, grouped by Neighborhood Tabulation Areas (NTAs), which\n                were created to predict population counts in New York City at a\n                level finer than Census Tracts. Neighborhoods are loosely\n                defined, but NTA's provide a sufficient rough estimate.\n              </p>\n            </details>\n            <details>\n              <summary>How did you make this?</summary>\n              <p>\n                Data aggregation was performed using Python and the geopandas\n                library. This front-end was built with create-react-app and\n                deployed onto surge.sh. Visualizations were made with a\n                combination of D3 and React, and the map is powered by Mapbox GL\n                JS.{\" \"}\n                <a href=\"https://github.com/rl2999/citibike-planner\">\n                  The source is available on GitHub.\n                </a>\n              </p>\n            </details>\n      <p>\n        Data is aggregated from{\" \"}\n        <a href=\"https://www.citibikenyc.com/system-data\">\n          CitiBike System Data\n        </a>\n        .\n      </p>\n      2020 App created by <a href=\"https://riledigital.com\">Ri Le</a>.{\" \"}\n      <a href=\"https://twitter.com/riledigital\">@riledigital</a>\n    </div>\n  );\n};\n\nexport default Footer;\n","/Users/upstatement/Dev/citibike-planner/src/components/CircleLegend.js",[],"/Users/upstatement/Dev/citibike-planner/src/components/Header/index.js",[],"/Users/upstatement/Dev/citibike-planner/src/components/LiveStatus/index.js",["125"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport styles from \"./LiveStatus.module.css\";\n\n// https://gbfs.citibikenyc.com/gbfs/en/station_status.json\n\nconst LiveStatus = ({\n  station_id,\n  num_bikes_available,\n  num_ebikes_available,\n  num_docks_available,\n  last_reported,\n  rental_url,\n}) => {\n  let statusInfo;\n  if (!station_id) {\n    statusInfo = \"none\";\n  } else {\n    statusInfo = {\n      bikes: num_bikes_available,\n      electric: !num_ebikes_available ? 0 : num_ebikes_available,\n      docks: num_docks_available,\n    };\n  }\n\n  const formattedTime = new Date(last_reported * 1000).toLocaleTimeString(\n    \"en-US\"\n  );\n  return station_id ? (\n    <>\n      <h3 className={styles.heading}>Live Status</h3>\n      <div className={styles.stationStatus}>\n        <div className={styles[\"station-bikes\"]}>\n          {statusInfo.bikes}{\" \"}\n          <span className={styles[\"station-status-label\"]}>Classic</span>\n        </div>\n        <div className={styles[\"station-electric\"]}>\n          {statusInfo.electric}\n          <span className={styles[\"station-status-label\"]}>\n            <span role=\"img\" aria-label=\"electric\">\n              ⚡\n            </span>\n            Electric\n          </span>\n        </div>\n        <div className={styles[\"station-docks\"]}>\n          {statusInfo.docks}\n          <span className={styles[\"station-status-label\"]}>Docks</span>\n        </div>\n      </div>\n      <p className={styles.lastUpdated}>Last updated on {formattedTime}</p>\n\n      {/* <div>\n        <a className={styles.buttonUnlock} href={rental_url}>\n          Unlock a bike\n        </a>\n      </div> */}\n    </>\n  ) : (\n    <div className={styles[\"loading\"]}>\n      <p>No station selected.</p>\n      <p>Please click on a station on the map to view the activity details.</p>\n    </div>\n  );\n};\n\nLiveStatus.propTypes = {};\nexport default LiveStatus;\n","/Users/upstatement/Dev/citibike-planner/src/components/StationActivity/index.js",[],"/Users/upstatement/Dev/citibike-planner/src/components/StationHeader/index.js",[],"/Users/upstatement/Dev/citibike-planner/src/components/StationPopularity/index.js",[],"/Users/upstatement/Dev/citibike-planner/src/components/StationRanking/index.js",[],"/Users/upstatement/Dev/citibike-planner/src/components/StationRanking/Ranking.js",[],"/Users/upstatement/Dev/citibike-planner/src/components/MapLegend/index.js",[],"/Users/upstatement/Dev/citibike-planner/src/components/MapLegend/MapLegend.js",["126","127"],"import React from \"react\";\nimport { interpolateHcl, interpolate, scaleLinear } from \"d3\";\nimport styles from \"./MapLegend.module.css\";\nconst MapLegend = ({\n  data = [...Array(5).fill()],\n  width = 120,\n  height = 40,\n}) => {\n  const legendLabel = {\n    fontFamily: \"Jost\",\n    fontSize: 10,\n  };\n  const color = scaleLinear()\n    .domain([0, data.length])\n    .range([\"white\", \"blue\"])\n    .interpolate(interpolateHcl);\n  const padding = 1;\n  const radius = height / 6;\n\n  if (!data) {\n    return <div>No data present.</div>;\n  }\n  const margin = {\n    left: 5,\n    right: 20,\n  };\n  return (\n    <div className={styles.container}>\n      <h4 className={styles.heading}>Legend</h4>\n      <figure style={{ maxWidth: \"100%\", margin: \"none\" }}>\n        <p>Popularity</p>\n        <svg viewBox={`0 0 ${width} ${height}`}>\n          <g\n            transform={`translate(${\n              margin.left + (0 + 0.5) * ((width - margin.right) / data.length)\n            }, 10)`}\n          >\n            <text style={legendLabel} textAnchor=\"middle\">\n              Least\n            </text>\n          </g>\n          <g\n            transform={`translate(${\n              margin.left +\n              (data.length - 1 + 0.5) * ((width - margin.right) / data.length)\n            }, 10)`}\n          >\n            <text style={legendLabel} textAnchor=\"middle\">\n              Most\n            </text>\n          </g>\n          {data.map((d, idx) => {\n            return (\n              <g key={idx}>\n                <circle\n                  cx={\n                    margin.left +\n                    (idx + 0.5) * ((width - margin.right) / data.length)\n                  }\n                  cy={height / 2}\n                  r={radius}\n                  fill={color(idx)}\n                  stroke=\"black\"\n                  strokeWidth=\"1px\"\n                />\n              </g>\n            );\n          })}\n        </svg>\n      </figure>\n    </div>\n  );\n};\n\nexport default MapLegend;\n",{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":8,"column":8,"nodeType":"134","messageId":"135","endLine":8,"endColumn":14},{"ruleId":"132","severity":1,"message":"136","line":10,"column":10,"nodeType":"134","messageId":"135","endLine":10,"endColumn":22},{"ruleId":"132","severity":1,"message":"137","line":12,"column":32,"nodeType":"134","messageId":"135","endLine":12,"endColumn":44},{"ruleId":"132","severity":1,"message":"138","line":18,"column":10,"nodeType":"134","messageId":"135","endLine":18,"endColumn":13},{"ruleId":"132","severity":1,"message":"139","line":23,"column":10,"nodeType":"134","messageId":"135","endLine":23,"endColumn":21},{"ruleId":"132","severity":1,"message":"140","line":26,"column":19,"nodeType":"134","messageId":"135","endLine":26,"endColumn":29},{"ruleId":"141","severity":1,"message":"142","line":185,"column":6,"nodeType":"143","endLine":185,"endColumn":8,"suggestions":"144"},{"ruleId":"128","replacedBy":"145"},{"ruleId":"130","replacedBy":"146"},{"ruleId":"132","severity":1,"message":"147","line":2,"column":17,"nodeType":"134","messageId":"135","endLine":2,"endColumn":26},{"ruleId":"132","severity":1,"message":"148","line":9,"column":10,"nodeType":"134","messageId":"135","endLine":9,"endColumn":14},{"ruleId":"132","severity":1,"message":"149","line":9,"column":16,"nodeType":"134","messageId":"135","endLine":9,"endColumn":23},{"ruleId":"132","severity":1,"message":"150","line":10,"column":9,"nodeType":"134","messageId":"135","endLine":10,"endColumn":28},{"ruleId":"132","severity":1,"message":"151","line":15,"column":10,"nodeType":"134","messageId":"135","endLine":15,"endColumn":15},{"ruleId":"132","severity":1,"message":"152","line":15,"column":17,"nodeType":"134","messageId":"135","endLine":15,"endColumn":25},{"ruleId":"141","severity":1,"message":"153","line":40,"column":17,"nodeType":"154","endLine":40,"endColumn":68},{"ruleId":"141","severity":1,"message":"155","line":41,"column":14,"nodeType":"156","endLine":41,"endColumn":64},{"ruleId":"157","severity":1,"message":"158","line":6,"column":9,"nodeType":"159","endLine":6,"endColumn":71},{"ruleId":"132","severity":1,"message":"160","line":2,"column":8,"nodeType":"134","messageId":"135","endLine":2,"endColumn":17},{"ruleId":"132","severity":1,"message":"161","line":2,"column":26,"nodeType":"134","messageId":"135","endLine":2,"endColumn":37},{"ruleId":"132","severity":1,"message":"162","line":17,"column":9,"nodeType":"134","messageId":"135","endLine":17,"endColumn":16},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],"no-unused-vars","'styles' is defined but never used.","Identifier","unusedVar","'styleDefault' is defined but never used.","'CircleLegend' is defined but never used.","'map' is assigned a value but never used.","'lastUpdated' is assigned a value but never used.","'setRanking' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'mapContainer' and 'markerUrl'. Either include them or remove the dependency array.","ArrayExpression",["165"],["163"],["164"],"'useEffect' is defined but never used.","'show' is assigned a value but never used.","'setShow' is assigned a value but never used.","'stationNeighborhood' is assigned a value but never used.","'items' is assigned a value but never used.","'setItems' is assigned a value but never used.","Assignments to the 'extentOut' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ConditionalExpression","Assignments to the 'yScale' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'PropTypes' is defined but never used.","'interpolate' is defined but never used.","'padding' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"166","fix":"167"},"Update the dependencies array to be: [mapContainer, markerUrl]",{"range":"168","text":"169"},[5371,5373],"[mapContainer, markerUrl]"]